"use strict";(self.webpackChunkeffekt_website=self.webpackChunkeffekt_website||[]).push([[3858],{"./node_modules/monaco-editor/esm/vs/platform/theme/common/colorUtils.js":(o,e,r)=>{r.d(e,{Bb:()=>g,Fd:()=>s,Gu:()=>h,HP:()=>u,Hz:()=>v,JO:()=>p,a:()=>b,e$:()=>m,oG:()=>x,x1:()=>k,yL:()=>B});var t=r("./node_modules/monaco-editor/esm/vs/base/common/assert.js"),n=r("./node_modules/monaco-editor/esm/vs/base/common/async.js"),i=r("./node_modules/monaco-editor/esm/vs/base/common/color.js"),d=r("./node_modules/monaco-editor/esm/vs/base/common/event.js"),c=r("./node_modules/monaco-editor/esm/vs/platform/jsonschemas/common/jsonContributionRegistry.js"),a=r("./node_modules/monaco-editor/esm/vs/platform/registry/common/platform.js"),l=r("./node_modules/monaco-editor/esm/vs/nls.js");function g(o){return`--vscode-${o.replace(/\./g,"-")}`}function h(o){return`var(${g(o)})`}function u(o,e){return`var(${g(o)}, ${e})`}const s={ColorContribution:"base.contributions.colors"};const f=new class{constructor(){this._onDidChangeSchema=new d.vl,this.onDidChangeSchema=this._onDidChangeSchema.event,this.colorSchema={type:"object",properties:{}},this.colorReferenceSchema={type:"string",enum:[],enumDescriptions:[]},this.colorsById={}}registerColor(o,e,r,t=!1,n){const i={id:o,description:r,defaults:e,needsTransparency:t,deprecationMessage:n};this.colorsById[o]=i;const d={type:"string",format:"color-hex",defaultSnippets:[{body:"${1:#ff0000}"}]};return n&&(d.deprecationMessage=n),t&&(d.pattern="^#(?:(?<rgba>[0-9a-fA-f]{3}[0-9a-eA-E])|(?:[0-9a-fA-F]{6}(?:(?![fF]{2})(?:[0-9a-fA-F]{2}))))?$",d.patternErrorMessage=l.kg("transparecyRequired","This color must be transparent or it will obscure content")),this.colorSchema.properties[o]={description:r,oneOf:[d,{type:"string",const:"default",description:l.kg("useDefault","Use the default color.")}]},this.colorReferenceSchema.enum.push(o),this.colorReferenceSchema.enumDescriptions.push(r),this._onDidChangeSchema.fire(),o}getColors(){return Object.keys(this.colorsById).map((o=>this.colorsById[o]))}resolveDefaultColor(o,e){const r=this.colorsById[o];if(r?.defaults){return F(null!==(t=r.defaults)&&"object"==typeof t&&"light"in t&&"dark"in t?r.defaults[e.type]:r.defaults,e)}var t}getColorSchema(){return this.colorSchema}toString(){return Object.keys(this.colorsById).sort(((o,e)=>{const r=-1===o.indexOf(".")?0:1,t=-1===e.indexOf(".")?0:1;return r!==t?r-t:o.localeCompare(e)})).map((o=>`- \`${o}\`: ${this.colorsById[o].description}`)).join("\n")}};function k(o,e,r,t,n){return f.registerColor(o,e,r,t,n)}function m(o,e){return{op:0,value:o,factor:e}}function b(o,e){return{op:1,value:o,factor:e}}function p(o,e){return{op:2,value:o,factor:e}}function B(...o){return{op:4,values:o}}function v(o,e,r){return{op:6,if:o,then:e,else:r}}function x(o,e,r,t){return{op:5,value:o,background:e,factor:r,transparency:t}}function F(o,e){if(null!==o)return"string"==typeof o?"#"===o[0]?i.Q1.fromHex(o):e.getColor(o):o instanceof i.Q1?o:"object"==typeof o?function(o,e){switch(o.op){case 0:return F(o.value,e)?.darken(o.factor);case 1:return F(o.value,e)?.lighten(o.factor);case 2:return F(o.value,e)?.transparent(o.factor);case 3:{const r=F(o.background,e);return r?F(o.value,e)?.makeOpaque(r):F(o.value,e)}case 4:for(const r of o.values){const o=F(r,e);if(o)return o}return;case 6:return F(e.defines(o.if)?o.then:o.else,e);case 5:{const r=F(o.value,e);if(!r)return;const t=F(o.background,e);return t?r.isDarkerThan(t)?i.Q1.getLighterColor(r,t,o.factor).transparent(o.transparency):i.Q1.getDarkerColor(r,t,o.factor).transparent(o.transparency):r.transparent(o.factor*o.transparency)}default:throw(0,t.xb)(o)}}(o,e):void 0}a.O.add(s.ColorContribution,f);const C="vscode://schemas/workbench-colors",w=a.O.as(c.F.JSONContribution);w.registerSchema(C,f.getColorSchema());const y=new n.uC((()=>w.notifySchemaChanged(C)),200);f.onDidChangeSchema((()=>{y.isScheduled()||y.schedule()}))},"./node_modules/monaco-editor/esm/vs/platform/theme/common/colors/editorColors.js":(o,e,r)=>{r.d(e,{$B:()=>G,AN:()=>f,B2:()=>J,By:()=>l,Cg:()=>g,DS:()=>P,EC:()=>E,EY:()=>W,Fi:()=>h,GN:()=>_,Gj:()=>M,Hn:()=>m,Hw:()=>Q,II:()=>B,JP:()=>go,P6:()=>O,Qw:()=>y,Rb:()=>s,S5:()=>T,St:()=>b,Ub:()=>L,WL:()=>A,Wf:()=>I,Yt:()=>a,ZE:()=>U,Zt:()=>x,_p:()=>R,bN:()=>ho,et:()=>V,f3:()=>D,f9:()=>z,fA:()=>co,i6:()=>v,ld:()=>$,mc:()=>Y,oZ:()=>S,p8:()=>H,pO:()=>p,rm:()=>C,sA:()=>X,sI:()=>u,se:()=>F,sj:()=>q,t:()=>w,tY:()=>lo,vV:()=>Z,wh:()=>k,z5:()=>ao});var t=r("./node_modules/monaco-editor/esm/vs/nls.js"),n=r("./node_modules/monaco-editor/esm/vs/base/common/color.js"),i=r("./node_modules/monaco-editor/esm/vs/platform/theme/common/colorUtils.js"),d=r("./node_modules/monaco-editor/esm/vs/platform/theme/common/colors/baseColors.js"),c=r("./node_modules/monaco-editor/esm/vs/platform/theme/common/colors/miscColors.js");const a=(0,i.x1)("editor.background",{light:"#ffffff",dark:"#1E1E1E",hcDark:n.Q1.black,hcLight:n.Q1.white},t.kg("editorBackground","Editor background color.")),l=(0,i.x1)("editor.foreground",{light:"#333333",dark:"#BBBBBB",hcDark:n.Q1.white,hcLight:d.CU},t.kg("editorForeground","Editor default foreground color.")),g=((0,i.x1)("editorStickyScroll.background",a,t.kg("editorStickyScrollBackground","Background color of sticky scroll in the editor")),(0,i.x1)("editorStickyScrollHover.background",{dark:"#2A2D2E",light:"#F0F0F0",hcDark:null,hcLight:n.Q1.fromHex("#0F4A85").transparent(.1)},t.kg("editorStickyScrollHoverBackground","Background color of sticky scroll on hover in the editor")),(0,i.x1)("editorStickyScroll.border",{dark:null,light:null,hcDark:d.b1,hcLight:d.b1},t.kg("editorStickyScrollBorder","Border color of sticky scroll in the editor")),(0,i.x1)("editorStickyScroll.shadow",c.bX,t.kg("editorStickyScrollShadow"," Shadow color of sticky scroll in the editor")),(0,i.x1)("editorWidget.background",{dark:"#252526",light:"#F3F3F3",hcDark:"#0C141F",hcLight:n.Q1.white},t.kg("editorWidgetBackground","Background color of editor widgets, such as find/replace."))),h=(0,i.x1)("editorWidget.foreground",d.CU,t.kg("editorWidgetForeground","Foreground color of editor widgets, such as find/replace.")),u=(0,i.x1)("editorWidget.border",{dark:"#454545",light:"#C8C8C8",hcDark:d.b1,hcLight:d.b1},t.kg("editorWidgetBorder","Border color of editor widgets. The color is only used if the widget chooses to have a border and if the color is not overridden by a widget.")),s=((0,i.x1)("editorWidget.resizeBorder",null,t.kg("editorWidgetResizeBorder","Border color of the resize bar of editor widgets. The color is only used if the widget chooses to have a resize border and if the color is not overridden by a widget.")),(0,i.x1)("editorError.background",null,t.kg("editorError.background","Background color of error text in the editor. The color must not be opaque so as not to hide underlying decorations."),!0),(0,i.x1)("editorError.foreground",{dark:"#F14C4C",light:"#E51400",hcDark:"#F48771",hcLight:"#B5200D"},t.kg("editorError.foreground","Foreground color of error squigglies in the editor."))),f=(0,i.x1)("editorError.border",{dark:null,light:null,hcDark:n.Q1.fromHex("#E47777").transparent(.8),hcLight:"#B5200D"},t.kg("errorBorder","If set, color of double underlines for errors in the editor.")),k=(0,i.x1)("editorWarning.background",null,t.kg("editorWarning.background","Background color of warning text in the editor. The color must not be opaque so as not to hide underlying decorations."),!0),m=(0,i.x1)("editorWarning.foreground",{dark:"#CCA700",light:"#BF8803",hcDark:"#FFD370",hcLight:"#895503"},t.kg("editorWarning.foreground","Foreground color of warning squigglies in the editor.")),b=(0,i.x1)("editorWarning.border",{dark:null,light:null,hcDark:n.Q1.fromHex("#FFCC00").transparent(.8),hcLight:n.Q1.fromHex("#FFCC00").transparent(.8)},t.kg("warningBorder","If set, color of double underlines for warnings in the editor.")),p=((0,i.x1)("editorInfo.background",null,t.kg("editorInfo.background","Background color of info text in the editor. The color must not be opaque so as not to hide underlying decorations."),!0),(0,i.x1)("editorInfo.foreground",{dark:"#3794FF",light:"#1a85ff",hcDark:"#3794FF",hcLight:"#1a85ff"},t.kg("editorInfo.foreground","Foreground color of info squigglies in the editor."))),B=(0,i.x1)("editorInfo.border",{dark:null,light:null,hcDark:n.Q1.fromHex("#3794FF").transparent(.8),hcLight:"#292929"},t.kg("infoBorder","If set, color of double underlines for infos in the editor.")),v=(0,i.x1)("editorHint.foreground",{dark:n.Q1.fromHex("#eeeeee").transparent(.7),light:"#6c6c6c",hcDark:null,hcLight:null},t.kg("editorHint.foreground","Foreground color of hint squigglies in the editor.")),x=((0,i.x1)("editorHint.border",{dark:null,light:null,hcDark:n.Q1.fromHex("#eeeeee").transparent(.8),hcLight:"#292929"},t.kg("hintBorder","If set, color of double underlines for hints in the editor.")),(0,i.x1)("editorLink.activeForeground",{dark:"#4E94CE",light:n.Q1.blue,hcDark:n.Q1.cyan,hcLight:"#292929"},t.kg("activeLinkForeground","Color of active links."))),F=(0,i.x1)("editor.selectionBackground",{light:"#ADD6FF",dark:"#264F78",hcDark:"#f3f518",hcLight:"#0F4A85"},t.kg("editorSelectionBackground","Color of the editor selection.")),C=(0,i.x1)("editor.selectionForeground",{light:null,dark:null,hcDark:"#000000",hcLight:n.Q1.white},t.kg("editorSelectionForeground","Color of the selected text for high contrast.")),w=(0,i.x1)("editor.inactiveSelectionBackground",{light:(0,i.JO)(F,.5),dark:(0,i.JO)(F,.5),hcDark:(0,i.JO)(F,.7),hcLight:(0,i.JO)(F,.5)},t.kg("editorInactiveSelection","Color of the selection in an inactive editor. The color must not be opaque so as not to hide underlying decorations."),!0),y=(0,i.x1)("editor.selectionHighlightBackground",{light:(0,i.oG)(F,a,.3,.6),dark:(0,i.oG)(F,a,.3,.6),hcDark:null,hcLight:null},t.kg("editorSelectionHighlight","Color for regions with the same content as the selection. The color must not be opaque so as not to hide underlying decorations."),!0),D=((0,i.x1)("editor.selectionHighlightBorder",{light:null,dark:null,hcDark:d.bu,hcLight:d.bu},t.kg("editorSelectionHighlightBorder","Border color for regions with the same content as the selection.")),(0,i.x1)("editor.findMatchBackground",{light:"#A8AC94",dark:"#515C6A",hcDark:null,hcLight:null},t.kg("editorFindMatch","Color of the current search match.")),(0,i.x1)("editor.findMatchForeground",null,t.kg("editorFindMatchForeground","Text color of the current search match."))),L=(0,i.x1)("editor.findMatchHighlightBackground",{light:"#EA5C0055",dark:"#EA5C0055",hcDark:null,hcLight:null},t.kg("findMatchHighlight","Color of the other search matches. The color must not be opaque so as not to hide underlying decorations."),!0),H=(0,i.x1)("editor.findMatchHighlightForeground",null,t.kg("findMatchHighlightForeground","Foreground color of the other search matches."),!0),E=((0,i.x1)("editor.findRangeHighlightBackground",{dark:"#3a3d4166",light:"#b4b4b44d",hcDark:null,hcLight:null},t.kg("findRangeHighlight","Color of the range limiting the search. The color must not be opaque so as not to hide underlying decorations."),!0),(0,i.x1)("editor.findMatchBorder",{light:null,dark:null,hcDark:d.bu,hcLight:d.bu},t.kg("editorFindMatchBorder","Border color of the current search match.")),(0,i.x1)("editor.findMatchHighlightBorder",{light:null,dark:null,hcDark:d.bu,hcLight:d.bu},t.kg("findMatchHighlightBorder","Border color of the other search matches."))),T=(0,i.x1)("editor.findRangeHighlightBorder",{dark:null,light:null,hcDark:(0,i.JO)(d.bu,.4),hcLight:(0,i.JO)(d.bu,.4)},t.kg("findRangeHighlightBorder","Border color of the range limiting the search. The color must not be opaque so as not to hide underlying decorations."),!0),I=((0,i.x1)("editor.hoverHighlightBackground",{light:"#ADD6FF26",dark:"#264f7840",hcDark:"#ADD6FF26",hcLight:null},t.kg("hoverHighlight","Highlight below the word for which a hover is shown. The color must not be opaque so as not to hide underlying decorations."),!0),(0,i.x1)("editorHoverWidget.background",g,t.kg("hoverBackground","Background color of the editor hover."))),S=((0,i.x1)("editorHoverWidget.foreground",h,t.kg("hoverForeground","Foreground color of the editor hover.")),(0,i.x1)("editorHoverWidget.border",u,t.kg("hoverBorder","Border color of the editor hover."))),O=((0,i.x1)("editorHoverWidget.statusBarBackground",{dark:(0,i.a)(I,.2),light:(0,i.e$)(I,.05),hcDark:g,hcLight:g},t.kg("statusBarBackground","Background color of the editor hover status bar.")),(0,i.x1)("editorInlayHint.foreground",{dark:"#969696",light:"#969696",hcDark:n.Q1.white,hcLight:n.Q1.black},t.kg("editorInlayHintForeground","Foreground color of inline hints"))),A=(0,i.x1)("editorInlayHint.background",{dark:(0,i.JO)(c.WM,.1),light:(0,i.JO)(c.WM,.1),hcDark:(0,i.JO)(n.Q1.white,.1),hcLight:(0,i.JO)(c.WM,.1)},t.kg("editorInlayHintBackground","Background color of inline hints")),Q=(0,i.x1)("editorInlayHint.typeForeground",O,t.kg("editorInlayHintForegroundTypes","Foreground color of inline hints for types")),R=(0,i.x1)("editorInlayHint.typeBackground",A,t.kg("editorInlayHintBackgroundTypes","Background color of inline hints for types")),q=(0,i.x1)("editorInlayHint.parameterForeground",O,t.kg("editorInlayHintForegroundParameter","Foreground color of inline hints for parameters")),J=(0,i.x1)("editorInlayHint.parameterBackground",A,t.kg("editorInlayHintBackgroundParameter","Background color of inline hints for parameters")),j=(0,i.x1)("editorLightBulb.foreground",{dark:"#FFCC00",light:"#DDB100",hcDark:"#FFCC00",hcLight:"#007ACC"},t.kg("editorLightBulbForeground","The color used for the lightbulb actions icon.")),W=((0,i.x1)("editorLightBulbAutoFix.foreground",{dark:"#75BEFF",light:"#007ACC",hcDark:"#75BEFF",hcLight:"#007ACC"},t.kg("editorLightBulbAutoFixForeground","The color used for the lightbulb auto fix actions icon.")),(0,i.x1)("editorLightBulbAi.foreground",j,t.kg("editorLightBulbAiForeground","The color used for the lightbulb AI icon.")),(0,i.x1)("editor.snippetTabstopHighlightBackground",{dark:new n.Q1(new n.bU(124,124,124,.3)),light:new n.Q1(new n.bU(10,50,100,.2)),hcDark:new n.Q1(new n.bU(124,124,124,.3)),hcLight:new n.Q1(new n.bU(10,50,100,.2))},t.kg("snippetTabstopHighlightBackground","Highlight background color of a snippet tabstop.")),(0,i.x1)("editor.snippetTabstopHighlightBorder",null,t.kg("snippetTabstopHighlightBorder","Highlight border color of a snippet tabstop.")),(0,i.x1)("editor.snippetFinalTabstopHighlightBackground",null,t.kg("snippetFinalTabstopHighlightBackground","Highlight background color of the final tabstop of a snippet.")),(0,i.x1)("editor.snippetFinalTabstopHighlightBorder",{dark:"#525252",light:new n.Q1(new n.bU(10,50,100,.5)),hcDark:"#525252",hcLight:"#292929"},t.kg("snippetFinalTabstopHighlightBorder","Highlight border color of the final tabstop of a snippet.")),new n.Q1(new n.bU(155,185,85,.2))),U=new n.Q1(new n.bU(255,0,0,.2)),M=(0,i.x1)("diffEditor.insertedTextBackground",{dark:"#9ccc2c33",light:"#9ccc2c40",hcDark:null,hcLight:null},t.kg("diffEditorInserted","Background color for text that got inserted. The color must not be opaque so as not to hide underlying decorations."),!0),_=(0,i.x1)("diffEditor.removedTextBackground",{dark:"#ff000033",light:"#ff000033",hcDark:null,hcLight:null},t.kg("diffEditorRemoved","Background color for text that got removed. The color must not be opaque so as not to hide underlying decorations."),!0),$=((0,i.x1)("diffEditor.insertedLineBackground",{dark:W,light:W,hcDark:null,hcLight:null},t.kg("diffEditorInsertedLines","Background color for lines that got inserted. The color must not be opaque so as not to hide underlying decorations."),!0),(0,i.x1)("diffEditor.removedLineBackground",{dark:U,light:U,hcDark:null,hcLight:null},t.kg("diffEditorRemovedLines","Background color for lines that got removed. The color must not be opaque so as not to hide underlying decorations."),!0),(0,i.x1)("diffEditorGutter.insertedLineBackground",null,t.kg("diffEditorInsertedLineGutter","Background color for the margin where lines got inserted.")),(0,i.x1)("diffEditorGutter.removedLineBackground",null,t.kg("diffEditorRemovedLineGutter","Background color for the margin where lines got removed.")),(0,i.x1)("diffEditorOverview.insertedForeground",null,t.kg("diffEditorOverviewInserted","Diff overview ruler foreground for inserted content."))),G=(0,i.x1)("diffEditorOverview.removedForeground",null,t.kg("diffEditorOverviewRemoved","Diff overview ruler foreground for removed content.")),z=((0,i.x1)("diffEditor.insertedTextBorder",{dark:null,light:null,hcDark:"#33ff2eff",hcLight:"#374E06"},t.kg("diffEditorInsertedOutline","Outline color for the text that got inserted.")),(0,i.x1)("diffEditor.removedTextBorder",{dark:null,light:null,hcDark:"#FF008F",hcLight:"#AD0707"},t.kg("diffEditorRemovedOutline","Outline color for text that got removed.")),(0,i.x1)("diffEditor.border",{dark:null,light:null,hcDark:d.b1,hcLight:d.b1},t.kg("diffEditorBorder","Border color between the two text editors.")),(0,i.x1)("diffEditor.diagonalFill",{dark:"#cccccc33",light:"#22222233",hcDark:null,hcLight:null},t.kg("diffDiagonalFill","Color of the diff editor's diagonal fill. The diagonal fill is used in side-by-side diff views.")),(0,i.x1)("diffEditor.unchangedRegionBackground","sideBar.background",t.kg("diffEditor.unchangedRegionBackground","The background color of unchanged blocks in the diff editor.")),(0,i.x1)("diffEditor.unchangedRegionForeground","foreground",t.kg("diffEditor.unchangedRegionForeground","The foreground color of unchanged blocks in the diff editor.")),(0,i.x1)("diffEditor.unchangedCodeBackground",{dark:"#74747429",light:"#b8b8b829",hcDark:null,hcLight:null},t.kg("diffEditor.unchangedCodeBackground","The background color of unchanged code in the diff editor.")),(0,i.x1)("widget.shadow",{dark:(0,i.JO)(n.Q1.black,.36),light:(0,i.JO)(n.Q1.black,.16),hcDark:null,hcLight:null},t.kg("widgetShadow","Shadow color of widgets such as find/replace inside the editor."))),P=(0,i.x1)("widget.border",{dark:null,light:null,hcDark:d.b1,hcLight:d.b1},t.kg("widgetBorder","Border color of widgets such as find/replace inside the editor.")),N=(0,i.x1)("toolbar.hoverBackground",{dark:"#5a5d5e50",light:"#b8b8b850",hcDark:null,hcLight:null},t.kg("toolbarHoverBackground","Toolbar background when hovering over actions using the mouse")),Y=((0,i.x1)("toolbar.hoverOutline",{dark:null,light:null,hcDark:d.bu,hcLight:d.bu},t.kg("toolbarHoverOutline","Toolbar outline when hovering over actions using the mouse")),(0,i.x1)("toolbar.activeBackground",{dark:(0,i.a)(N,.1),light:(0,i.e$)(N,.1),hcDark:null,hcLight:null},t.kg("toolbarActiveBackground","Toolbar background when holding the mouse over actions")),(0,i.x1)("breadcrumb.foreground",(0,i.JO)(d.CU,.8),t.kg("breadcrumbsFocusForeground","Color of focused breadcrumb items."))),Z=(0,i.x1)("breadcrumb.background",a,t.kg("breadcrumbsBackground","Background color of breadcrumb items.")),V=(0,i.x1)("breadcrumb.focusForeground",{light:(0,i.e$)(d.CU,.2),dark:(0,i.a)(d.CU,.1),hcDark:(0,i.a)(d.CU,.1),hcLight:(0,i.a)(d.CU,.1)},t.kg("breadcrumbsFocusForeground","Color of focused breadcrumb items.")),X=(0,i.x1)("breadcrumb.activeSelectionForeground",{light:(0,i.e$)(d.CU,.2),dark:(0,i.a)(d.CU,.1),hcDark:(0,i.a)(d.CU,.1),hcLight:(0,i.a)(d.CU,.1)},t.kg("breadcrumbsSelectedForeground","Color of selected breadcrumb items.")),K=((0,i.x1)("breadcrumbPicker.background",g,t.kg("breadcrumbsSelectedBackground","Background color of breadcrumb item picker.")),n.Q1.fromHex("#40C8AE").transparent(.5)),oo=n.Q1.fromHex("#40A6FF").transparent(.5),eo=n.Q1.fromHex("#606060").transparent(.4),ro=(0,i.x1)("merge.currentHeaderBackground",{dark:K,light:K,hcDark:null,hcLight:null},t.kg("mergeCurrentHeaderBackground","Current header background in inline merge-conflicts. The color must not be opaque so as not to hide underlying decorations."),!0),to=((0,i.x1)("merge.currentContentBackground",(0,i.JO)(ro,.4),t.kg("mergeCurrentContentBackground","Current content background in inline merge-conflicts. The color must not be opaque so as not to hide underlying decorations."),!0),(0,i.x1)("merge.incomingHeaderBackground",{dark:oo,light:oo,hcDark:null,hcLight:null},t.kg("mergeIncomingHeaderBackground","Incoming header background in inline merge-conflicts. The color must not be opaque so as not to hide underlying decorations."),!0)),no=((0,i.x1)("merge.incomingContentBackground",(0,i.JO)(to,.4),t.kg("mergeIncomingContentBackground","Incoming content background in inline merge-conflicts. The color must not be opaque so as not to hide underlying decorations."),!0),(0,i.x1)("merge.commonHeaderBackground",{dark:eo,light:eo,hcDark:null,hcLight:null},t.kg("mergeCommonHeaderBackground","Common ancestor header background in inline merge-conflicts. The color must not be opaque so as not to hide underlying decorations."),!0)),io=((0,i.x1)("merge.commonContentBackground",(0,i.JO)(no,.4),t.kg("mergeCommonContentBackground","Common ancestor content background in inline merge-conflicts. The color must not be opaque so as not to hide underlying decorations."),!0),(0,i.x1)("merge.border",{dark:null,light:null,hcDark:"#C3DF6F",hcLight:"#007ACC"},t.kg("mergeBorder","Border color on headers and the splitter in inline merge-conflicts."))),co=((0,i.x1)("editorOverviewRuler.currentContentForeground",{dark:(0,i.JO)(ro,1),light:(0,i.JO)(ro,1),hcDark:io,hcLight:io},t.kg("overviewRulerCurrentContentForeground","Current overview ruler foreground for inline merge-conflicts.")),(0,i.x1)("editorOverviewRuler.incomingContentForeground",{dark:(0,i.JO)(to,1),light:(0,i.JO)(to,1),hcDark:io,hcLight:io},t.kg("overviewRulerIncomingContentForeground","Incoming overview ruler foreground for inline merge-conflicts.")),(0,i.x1)("editorOverviewRuler.commonContentForeground",{dark:(0,i.JO)(no,1),light:(0,i.JO)(no,1),hcDark:io,hcLight:io},t.kg("overviewRulerCommonContentForeground","Common ancestor overview ruler foreground for inline merge-conflicts.")),(0,i.x1)("editorOverviewRuler.findMatchForeground",{dark:"#d186167e",light:"#d186167e",hcDark:"#AB5A00",hcLight:"#AB5A00"},t.kg("overviewRulerFindMatchForeground","Overview ruler marker color for find matches. The color must not be opaque so as not to hide underlying decorations."),!0)),ao=(0,i.x1)("editorOverviewRuler.selectionHighlightForeground","#A0A0A0CC",t.kg("overviewRulerSelectionHighlightForeground","Overview ruler marker color for selection highlights. The color must not be opaque so as not to hide underlying decorations."),!0),lo=(0,i.x1)("problemsErrorIcon.foreground",s,t.kg("problemsErrorIconForeground","The color used for the problems error icon.")),go=(0,i.x1)("problemsWarningIcon.foreground",m,t.kg("problemsWarningIconForeground","The color used for the problems warning icon.")),ho=(0,i.x1)("problemsInfoIcon.foreground",p,t.kg("problemsInfoIconForeground","The color used for the problems info icon."))}}]);